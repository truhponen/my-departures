import logging
import config
import db
import time
from datetime import datetime

class bot_operation:
    def __init__(self, service, stop_id) -> None:
        self.service = service
        self.stop_id = stop_id

    def do(self):

        logging.info(str(self.name) + " for " + str(self.stop_id))

        # Retrieve from database
        
        # Load DB configuration dict

        # Pass DB configuration dict to DB function
        if config.operations['db'][self.service]['query'] == False
            pass
        else:
        db_response = db.return_based_on_time(config.operations['db'][self.service]['query'])

        if len(db_response) == 0:
            logging.info("No departures to be updated") 

        else:
            for departure in db_response:
                departure_id = departure['id']
                departure_time = departure['time']
                departure_headsign = departure['headsign']
                message_id = departure['message_id']
                chat_id = departure['chat_id']
                text_from_db = departure['text']

                # Form message
                text = datetime.fromtimestamp(departure_time).strftime("%H:%M") + " - " + departure_headsign
                logging.info("Message is " + text)

                if text != text_from_db:

                    # Send message
                    self.update_message_rest.call(chat_id=chat_id, message_id=message_id, text=text)

                    # Update data in DB
                    db_data = {
                           # 'id': departure_id,
                           'time': departure_time,
                           'headsign': departure_headsign,
                           # 'send_status': True,
                           # 'message_id': message_id,
                           # 'chat_id': chat_id,
                           'text': text,
                           'updated': time.time()
                           }
                    db.upsert(self.stop_id, departure_id, db_data)
                    logging.info("Departure " + str(departure_id) + " updated with message details " + str(db_data)) 



        # Load DB configuration dict

        # Pass DB configuration dict to DB function

        # For each db_response item
        # Send REST

        # For each rest_response
        # Store DB 

        db_response = db.return_based_on_time(dict)

        if len(db_response) == 0:
            logging.info("No new departures to " + str(self.name)) 

        else:
        """
        
        print(db_response)
        """
        # Form message
        text = datetime.fromtimestamp(departure_time).strftime("%H:%M") + " - " + headsign
        logging.info("Message is " + text)

        # Send message
        rest_response = self.send_message_rest.call(chat_id=chat_id, text=text)

        # Update message details to database
        message_id = rest_response['result']['message_id']
        chat_id = rest_response['result']['chat']['id']
        db_data = {
                    # 'id': departure_id,
                    'time': departure_time,
                    'headsign': departure_headsign,
                    'send_status': True,
                    'message_id': message_id,
                    'chat_id': chat_id,
                    'text': text,
                    'updated': time.time()
                    }
        db.upsert(self.stop_id, departure_id, db_data)
        logging.info("Departure " + str(departure_id) + " updated with message details " + str(db_data))
            """

this = bot_operation("nimi", "stop")
this.do()
